// ==UserScript==
// @name         Checkpoint Mod
// @namespace    http://tampermonkey.net/
// @version      1.1
// @description  Have The Powah Of Placing Checkpoints!
// @author       ThASaNdGgUy
// @match        *dopplercreative.com/test/*
// @grant        none
// ==/UserScript==

let currentCheckpoint = null;
let checkpointGravity = null;
let checkpointCameraRotation = null;
let checkpointSpriteUrl = "https://tiermaker.com/images/media/template_images/2024/16814078/geometry-dash-geode-mods-tier-list-16814078/logo---2024-02-19t133400190.png";
let checkpointSprite = null;
let spriteWidth = 40;
let spriteHeight = 40;

function createCheckpoint() {
    const playerPos = { ...app.player.position };
    currentCheckpoint = {
        x: playerPos.x,
        y: playerPos.y,
        z: playerPos.z
    };

    checkpointGravity = {
        x: app.engine.gravity.x,
        y: app.engine.gravity.y
    };

    checkpointCameraRotation = getCameraRotationFromGravity();

    createCheckpointSprite();
}

function getCameraRotationFromGravity() {
    if (app.engine.gravity.y > 0) {
        return 0; // Normal gravity
    } else if (app.engine.gravity.y < 0) {
        return 180; // Reverse gravity
    } else if (app.engine.gravity.x > 0) {
        return 90; // Gravity to the right
    } else if (app.engine.gravity.x < 0) {
        return -90; // Gravity to the left
    }
    return 0; // Default rotation
}

function respawnAtCheckpoint() {
    if (currentCheckpoint) {
        app.player.setPosition({
            x: currentCheckpoint.x,
            y: currentCheckpoint.y,
            z: currentCheckpoint.z
        }, false);

        if (checkpointGravity) {
            app.engine.gravity.x = checkpointGravity.x;
            app.engine.gravity.y = checkpointGravity.y;
        }

        if (checkpointCameraRotation !== null) {
            setCameraRotation(checkpointCameraRotation);
        }
    }
}

function setCameraRotation(rotation) {
    app.camera.rotation.z = (rotation * Math.PI) / 180; // Convert degrees to radians
}

function createCheckpointSprite() {
    if (checkpointSprite) checkpointSprite.remove();
    checkpointSprite = document.createElement('img');
    checkpointSprite.src = checkpointSpriteUrl;
    checkpointSprite.style.position = 'absolute';
    checkpointSprite.style.width = `${spriteWidth}px`;
    checkpointSprite.style.height = `${spriteHeight}px`;
    checkpointSprite.style.zIndex = '10';
    document.body.appendChild(checkpointSprite);
    updateCheckpointSpritePosition();
}

function updateCheckpointSpritePosition() {
    if (!checkpointSprite || !currentCheckpoint) return;
    const cameraPos = app.camera.position;
    const checkpointPos = currentCheckpoint;
    const screenX = (window.innerWidth / 2) + 2 * (checkpointPos.x - cameraPos.x);
    const screenY = (window.innerHeight / 2) - 2 * (checkpointPos.y - cameraPos.y);
    checkpointSprite.style.left = `${screenX - spriteWidth / 2}px`;
    checkpointSprite.style.top = `${screenY - spriteHeight / 2}px`;
}

function removeLatestCheckpoint() {
    if (currentCheckpoint) {
        currentCheckpoint = null;
        checkpointGravity = null;
        checkpointCameraRotation = null;

        if (checkpointSprite) {
            checkpointSprite.remove();
            checkpointSprite = null;
        }
    }
}

const originalKill = app.player.kill;
app.player.kill = function () {
    originalKill.call(this);
    setTimeout(() => {
        respawnAtCheckpoint();
    }, 1000);
};

document.addEventListener("keydown", (e) => {
    if (e.key === "z") createCheckpoint();
    else if (e.key === "c") respawnAtCheckpoint();
    else if (e.key === "x") removeLatestCheckpoint();
});

function syncSpriteWithCheckpoint() {
    updateCheckpointSpritePosition();
}

addUpdateFunction(syncSpriteWithCheckpoint);
addModToList("Checkpoint Mod");
